{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Using SPDX","text":"<p>Information on how to use the SPDX specification.</p> <p>Copyright \u00a9 2024, The Linux Foundation and its Contributors.</p> <p>This work is licensed under the Community Specification License 1.0 (Community-Spec-1.0).</p> <p>Info</p> <p>This is not part of the specification.</p> <p>Everything on this website is for informative purpose only.</p>"},{"location":"cross-ref/","title":"Cross referencing in SPDX 3","text":"<p>This document will walk though how to refer to SPDX Elements across documents (e.g. cross reference).</p> <p>If you do would like to construct the complete example documents from this Markdown file, use the following command:</p> <pre><code>cat cross-ref.md | awk 'BEGIN{flag=0} /^```json/, $0==\"```\" { if (/^---$/){flag++} else if ($0 !~ /^```.*/ ) print $0 &gt; \"doc-\" flag \".spdx.json\"}'\n</code></pre>","tags":["reference","v3.0"]},{"location":"cross-ref/#linking-via-spdxid","title":"Linking via spdxId","text":"<p>It is frequently desired (and necessary) to reference an SPDX 3 Element that lives in one document from another. Since SPDX documents are valid JSON-LD documents, linking elements together can be as simple as referencing the spdxId of one element from another (in the same way that doing so within a document links Elements together. For example, assume we have this document that contains a Person we want to reference in another document:</p> <pre><code>{\n    \"@context\": \"https://spdx.org/rdf/3.0.0/spdx-context.jsonld\",\n    \"@graph\": [\n        {\n            \"type\": \"Person\",\n            \"spdxId\": \"https://spdx.org/spdxdocs/Person/JoshuaWatt-0ef7e15a-5628-4bd9-8485-a3eace6dcc4f\",\n            \"creationInfo\": \"_:creationinfo\",\n            \"name\": \"Joshua Watt\",\n            \"externalIdentifier\": [\n                {\n                    \"type\": \"ExternalIdentifier\",\n                    \"externalIdentifierType\": \"email\",\n                    \"identifier\": \"JPEWhacker@gmail.com\"\n                }\n            ]\n        },\n        {\n            \"type\": \"CreationInfo\",\n            \"@id\": \"_:creationinfo\",\n            \"specVersion\": \"3.0.0\",\n            \"createdBy\": [\n                \"https://spdx.org/spdxdocs/Person/JoshuaWatt-0ef7e15a-5628-4bd9-8485-a3eace6dcc4f\"\n            ],\n            \"created\": \"2024-03-06T00:00:00Z\"\n        },\n        {\n            \"type\": \"SpdxDocument\",\n            \"spdxId\": \"https://spdx.org/spdxdocs/Document1-7bd25aaf-64b7-4ccc-aa85-84695cef4c17\",\n            \"creationInfo\": \"_:creationinfo\",\n            \"profileConformance\": [\n                \"core\"\n            ],\n            \"rootElement\": [\n                \"https://spdx.org/spdxdocs/Person/JoshuaWatt-0ef7e15a-5628-4bd9-8485-a3eace6dcc4f\"\n            ]\n        }\n    ]\n}\n</code></pre> <p>Now, in our new document we can reference the \"Joshua Watt\" person by simply referring to it by its spdxId. For example, to indicate that this new document was also written by the same person, we can reference it in the creation info (note the createdBy property):</p> <pre><code>---\n{\n    \"@context\": \"https://spdx.org/rdf/3.0.0/spdx-context.jsonld\",\n    \"@graph\": [\n        {\n            \"type\": \"CreationInfo\",\n            \"@id\": \"_:creationinfo1\",\n            \"specVersion\": \"3.0.0\",\n            \"createdBy\": [\n                \"https://spdx.org/spdxdocs/Person/JoshuaWatt-0ef7e15a-5628-4bd9-8485-a3eace6dcc4f\"\n            ],\n            \"created\": \"2024-05-08T00:00:00Z\"\n        },\n</code></pre>","tags":["reference","v3.0"]},{"location":"cross-ref/#imports","title":"Imports","text":"<p>This is sufficient to link documents in JSON-LD, but it is missing some useful information that SPDX requires you to specify. Namely, since spdxIds are not necessarily resolvable URLs, this gives no indication as to where the Person can be found. In order to provide this information, SPDX requires that all externally referenced spdxIds be enumerated in the imports property of the local SpdxDocument. Lets start by writing the preamble for the SpdxDocument:</p> <pre><code>        {\n            \"type\": \"SpdxDocument\",\n            \"spdxId\": \"https://spdx.org/spdxdocs/Document2-72d52ac3-3642-47be-9f83-8fbef6a962b4\",\n            \"creationInfo\": \"_:creationinfo1\",\n            \"profileConformance\": [\n                \"core\",\n                \"software\"\n            ],\n            \"imports\": [\n</code></pre> <p>The imports property is a list of ExternalMap objects, one for each external spdxId being referenced. The class has one required property called externalSpdxId which is the external spdxId being described:</p> <pre><code>                {\n                    \"type\": \"ExternalMap\",\n                    \"externalSpdxId\": \"https://spdx.org/spdxdocs/Person/JoshuaWatt-0ef7e15a-5628-4bd9-8485-a3eace6dcc4f\",\n</code></pre> <p>In addition to this, there are a few optional fields. The first is the locationHint property which is a URI that indicates where the document that contains the external spdxId may be located. Since this is an actual resolvable URI, consumers of the document can use locate the unresolved spdxId. While optional, this field is recommended:</p> <pre><code>                    \"locationHint\": \"http://downloads.example.com/Document1.spdx.json\",\n</code></pre> <p>In addition to the location, the verifiedUsing property indicates how a user can verify the integrity of the external document to ensure it has not been tampered with. It can be 0 or more IntegrityMethod objects. While also optional, it is recommended to include at least one:</p> <pre><code>                    \"verifiedUsing\": [{\n                        \"type\": \"Hash\",\n                        \"algorithm\": \"sha256\",\n                        \"hashValue\": \"3ba8c249c1ba1b6fe20582de88a5123b317632a5a94ba27199d01724df4eb149\"\n                    }],\n</code></pre> <p>Finally, the definingArtifact allows a much richer expression of information about the document that contains the external spdxId by linking to a complete Artifact element. This field is also optional, but if you need the impressive expressive power of the <code>Artifact</code> class, it is also recommended:</p> <pre><code>                    \"definingArtifact\": \"https://spdx.org/spdxdocs/Artifact-4762f4c5-3362-47e9-9595-5182235ef577\"\n</code></pre> <p>It should be noted that it is reasonable for the <code>definingArtifact</code> itself to be an external spdxId, as long as it also has the relevant entry in <code>imports</code>.</p> <p>We also need to add an import for the SpdxDocument that contains the author, as we will be referencing it later, so lets do that now:</p> <pre><code>                },\n                {\n                    \"type\": \"ExternalMap\",\n                    \"externalSpdxId\": \"https://spdx.org/spdxdocs/Document1-7bd25aaf-64b7-4ccc-aa85-84695cef4c17\",\n                    \"locationHint\": \"http://downloads.example.com/Document1.spdx.json\",\n                    \"verifiedUsing\": [{\n                        \"type\": \"Hash\",\n                        \"algorithm\": \"sha256\",\n                        \"hashValue\": \"3ba8c249c1ba1b6fe20582de88a5123b317632a5a94ba27199d01724df4eb149\"\n                    }],\n                    \"definingArtifact\": \"https://spdx.org/spdxdocs/Artifact-4762f4c5-3362-47e9-9595-5182235ef577\"\n                }\n</code></pre> <p>And that is it! By providing this information you are explaining to consumer of the document how they can resolve the external spdxIds.</p> <p>Lets close out our SpdxDocument</p> <pre><code>            ]\n        },\n</code></pre> <p>Since we are using an Artifact that describes the SpdxDocument containing the external spdxId, we need to write that now:</p> <pre><code>        {\n            \"type\": \"software_File\",\n            \"spdxId\": \"https://spdx.org/spdxdocs/Artifact-4762f4c5-3362-47e9-9595-5182235ef577\",\n            \"creationInfo\": \"_:creationinfo1\",\n            \"software_fileKind\": \"file\",\n            \"software_primaryPurpose\": \"file\",\n            \"software_contentType\": \"application/spdx+json\",\n            \"verifiedUsing\": [{\n                \"type\": \"Hash\",\n                \"algorithm\": \"sha256\",\n                \"hashValue\": \"3ba8c249c1ba1b6fe20582de88a5123b317632a5a94ba27199d01724df4eb149\"\n            }],\n            \"originatedBy\": [\n                \"https://spdx.org/spdxdocs/Person/JoshuaWatt-0ef7e15a-5628-4bd9-8485-a3eace6dcc4f\"\n            ],\n            \"suppliedBy\": \"https://spdx.org/spdxdocs/Person/JoshuaWatt-0ef7e15a-5628-4bd9-8485-a3eace6dcc4f\",\n            \"releaseTime\": \"2024-03-06T00:00:00Z\",\n            \"builtTime\": \"2024-03-06T00:00:00Z\"\n        },\n</code></pre> <p>Finally, since we are using an Artifact, we need to add a Relationship with type <code>serailizedInArtifact</code> to link the artifact and the serialized SpdxDocument. Note that this is where the <code>spdxId</code> of the <code>SpdxDocument</code> is referenced which is why we needed to import it earlier:</p> <pre><code>        {\n            \"spdxId\": \"https://spdx.org/spdxdocs/Relationship/serializedInArtifact-141ec767-40f2-4aad-9658-ac2703f3a7d9\",\n            \"type\": \"Relationship\",\n            \"creationInfo\": \"_:creationinfo1\",\n            \"relationshipType\": \"serializedInArtifact\",\n            \"from\": \"https://spdx.org/spdxdocs/Document1-7bd25aaf-64b7-4ccc-aa85-84695cef4c17\",\n            \"to\": [\n                \"https://spdx.org/spdxdocs/Artifact-4762f4c5-3362-47e9-9595-5182235ef577\"\n            ]\n        }\n    ]\n}\n</code></pre> <p>Happy Linking!</p>","tags":["reference","v3.0"]},{"location":"getting-started/","title":"Getting started writing SPDX 3","text":"<p>(a.k.a My First SPDX File)</p> <p>This guide is designed to walk you through the concepts behind an SPDX document, by walking through writing one by hand. While it is possible to write all your SPDX documents by hand, we would recommend looking at the various language bindings that are available for crafting more complex documents. Nevertheless, walking through an example of a hand written document can be instructive into how SPDX documents work to better understand concepts that are at play, even when using language bindings.</p> <p>All of the provided fragments listed here are intended to be used to construct a complete a valid SPDX JSON document when concatenated together</p> <p>If you do would like to construct the complete example from this Markdown file, use the following command:</p> <pre><code>cat getting-started.md | awk 'BEGIN{flag=0} /^```json/, $0==\"```\" { if (/^---$/){flag++} else if ($0 !~ /^```.*/ ) print $0 &gt; \"doc-\" flag \".spdx.json\"}'\n</code></pre> <p>Please note that all descriptions of properties, classes, etc. are non-normative; that is they are intended to help you understand what is going on in simpler language, but are not necessarily complete. Links to the full official documentation are provided where possible.</p>","tags":["v3.0"]},{"location":"getting-started/#the-preamble","title":"The Preamble","text":"<p>All documents need to start somewhere, and SPDX documents are no exception.</p> <p>The root of all SPDX documents will be a JSON object, so start with that:</p> <pre><code>{\n</code></pre> <p>Next, we need to identify that the document is an SPDX 3 JSON-LD document, which is done with:</p> <pre><code>    \"@context\": \"https://spdx.org/rdf/3.0.0/spdx-context.jsonld\",\n</code></pre> <p>SPDX documents are designed to be a strict subset of JSON-LD, such that they can be parsed using either a full JSON-LD parser if you need the full power of linked documents or RDF, or a much simpler JSON parser if all you care about is extracting meaningful SPDX data from the document.</p> <p>Because the document is valid JSON-LD, the <code>@context</code> must be provided to tell the JSON-LD parser how to expand the human readable names in the document into full IRIs (don't worry if you don't know what that means, it's not really that important). You can think of this line as telling us \"This is an SPDX document, and this provided URL tells us how to decode it\". The SPDX JSON Schema will force you to put the correct value here when validating a document.</p> <p>Now, we need to specify the list of objects that we want to create in this document. JSON-LD has a special way of specifying this list using the <code>@graph</code> property of the root object like so:</p> <pre><code>    \"@graph\": [\n</code></pre>","tags":["v3.0"]},{"location":"getting-started/#tell-us-about-yourself","title":"Tell us about yourself","text":"<p>Our first SPDX object is going to be a Person that tells us who is writing this document (you!), so lets get started with it:</p> <pre><code>        {\n            \"type\": \"Person\",\n</code></pre> <p>This is the basic format for any object in SPDX; all objects have one required property named <code>type</code> that tells us what this object actually is, so here we say this is a Person.</p> <p>Next, we need to name our object:</p> <pre><code>            \"spdxId\": \"http://spdx.org/spdxdocs/Person/JoshuaWatt-141ec767-40f2-4aad-9658-ac2703f3a7d9\",\n</code></pre> <p>Most objects can have some sort of \"ID\" property that gives it a name. In the case of Person, that property is called <code>spdxId</code> (inherited from Element). This property is the URI that should give this object a universally unique name. Although this property looks like a HTTP URL, it is in fact not. Technically speaking, a URL defined a Location, where as a URI defines an Identifier (i.e. the name by which something is known). In all likelihood, a URI is not a resolvable location from whence you can do an HTTP <code>GET</code> to retrieve data, but rather just a way of constructing a namespaced identifier. This identifier can be used within this document to refer to this object (more on that later), or it can be referenced from other documents to refer to this specific object (although in that case there needs to be additional information to describe how to find this document). URI's are considered to be universally unique, so any objects constructed with this URI are considered to be the same object, and any references to this URI is a reference to this specific object we are creating.</p> <p>If you work for a company, own a domain, etc. it is encouraged to use that (or some subdomain of it) in place of <code>spdx.org/spdxdocs</code>.</p> <p>In practice, many <code>spdxId</code> values will have some sort of hash or random UUID-like string incorporated to make them unique.</p> <p>Moving on from this, we have:</p> <pre><code>            \"creationInfo\": \"_:creationinfo\",\n</code></pre> <p>All SPDX objects derived from Element must specify how they were created by linking to a CreationInfo object. It is important to know the providence of where objects come from; but more on this later.</p> <pre><code>            \"name\": \"Joshua Watt\",\n</code></pre> <p>The optional name property is inherited from the <code>Element</code> class, and means \"the common name for the thing\", or in this case, your name.</p> <p>As our last step, we want to indicate another way by which You are known to the world; specifically your E-mail address.</p> <p>To do this we first need to use the (optional) externalIdentifier property which Person inherits from Element:</p> <pre><code>            \"externalIdentifier\": [\n</code></pre> <p>This property is an array of ExternalIdentifier objects, so start by adding one to the array:</p> <pre><code>                {\n                    \"type\": \"ExternalIdentifier\",\n</code></pre> <p>Again notice this uses the <code>type</code> property to identify what the object is. However it should be noted that this is our first object that is not derived from Element, and therefore it does not need a <code>spdxId</code> property.</p> <p>Next, lets add the relevant information about your email address:</p> <pre><code>                    \"externalIdentifierType\": \"email\",\n                    \"identifier\": \"JPEWhacker@gmail.com\"\n</code></pre> <p>Two properties are used here. First, externalIdentifierType is used to indicate what type of external identifier this is. There are many choices, but in the case we are specifying your email address, so we choose the value <code>email</code>. The second property is the indentifier property which is the actual string identifier (in this case, your email address).</p> <p>We are now done with our Person, so close it all out and prepare for the next object:</p> <pre><code>                }\n            ]\n        },\n</code></pre>","tags":["v3.0"]},{"location":"getting-started/#where-did-all-this-stuff-come-from","title":"Where did all this stuff come from?","text":"<p>Our next object is going to be a CreationInfo object. It is required to provide one for every SPDX document, as all objects derived from Element must link to one in their creationInfo property to indicate where they came from.</p> <p>Note that the CreationInfo describes where a SPDX Element itself came from (that is, who wrote the actual JSON). This is a distinct concept from describing where the thing an Element describes comes from, which is covered later.</p> <p>Lets get started:</p> <pre><code>        {\n            \"type\": \"CreationInfo\",\n</code></pre> <p>Hopefully this is making sense. We are saying this object is a CreationInfo.</p> <pre><code>            \"@id\": \"_:creationinfo\",\n</code></pre> <p>This object also has an <code>@id</code> similar to the <code>spdxId</code> of our person, but it is subtly different First of all, this one is not a URI like our Person, but instead starts with a <code>_:</code>. This type of identifier is known as a blank node. Blank nodes serve a similar purpose to the URI of the <code>spdxId</code>, however they only have scope within this SPDX document. What this means is that it be impossible to reference this CreationInfo by name outside of this document. Inside the document, you can use this identifier to refer to this object. The string after the <code>_:</code> is arbitrary and you may choose whatever unique (within the document) string that you choose.</p> <p>It should be noted that CreationInfo does not derive from Element class (like our previous example of ExternalIdentifier), and as such the <code>@id</code> property is technically optional. However, since we will need to refer to this object at other places in the document, we must give it an identifier. This also means that this object does not have a mandatory creationInfo property (which makes sense since it would be a circular reference). Finally, CreationInfo is only allowed to have a blank node identifier.</p> <p>If you look back at the Person we just created, you'll notice that its creationInfo property has the string value that matches the <code>@id</code> of this object; this is how objects are linked together by reference in SPDX.</p> <p>Next, we need to specify which version of the SPDX spec that elements linking to this CreationInfo are conforming to:</p> <pre><code>            \"specVersion\": \"3.0.0\",\n</code></pre> <p>Now, we need to use the createdBy property to indicated who (or what) created the elements that are linked to this CreationInfo:</p> <pre><code>            \"createdBy\": [\n                \"http://spdx.org/spdxdocs/Person/JoshuaWatt-141ec767-40f2-4aad-9658-ac2703f3a7d9\"\n            ],\n</code></pre> <p>This property is a list of reference to any class that derives from Agent. Since you are the person writing the document, put a single list item that is the <code>spdxId</code> of your Person element here to link them together. Note that even though this is using a full URI instead of a blank node, this is linking in the same way as creationInfo described above.</p> <p>Also, it is worth noting that this does indeed create a circular reference between our Person.creationInfo property and CreationInfo.createdBy property. This is fine in SPDX, as objects are not required to be a Directed Acyclical Graph (DAG).</p> <p>Finally, we need to specify the date that any objects linking to this CreationInfo were created using the created property and close out the object:</p> <pre><code>            \"created\": \"2024-03-06T00:00:00Z\"\n        },\n</code></pre> <p>Use today's date and time in ISO 8601 with the format: <code>\"%Y-%m-%dT%H:%M:%SZ\"</code>. The timezone should always be UTC.</p>","tags":["v3.0"]},{"location":"getting-started/#describing-the-document","title":"Describing the Document","text":"<p>SPDX requires that information about the document itself be provided. In order to do this, we must create a SpdxDocument object, so lets do that now:</p> <pre><code>        {\n            \"type\": \"SpdxDocument\",\n            \"spdxId\": \"https://spdx.org/spdxdocs/Document1-d078aed9-384d-4a64-87cb-99c79647c8c9\",\n            \"creationInfo\": \"_:creationinfo\",\n</code></pre> <p>SpdxDocument derives from Element, so it has 3 required properties, <code>type</code>, <code>spdxId</code> and creationInfo. We've seen all of these properties before in Person, so hopefully this getting more familiar. Note that we again link back out our previous CreationInfo object.</p> <p>Next, we need to indicate which Profiles our document uses using the profileConformance property. This can be used by consumers of the document to quickly determine if the information they want is in the document (for example, if a user wants to find CVE data, but the <code>security</code> profile is not present, there is no reason to continue looking in this document).</p> <pre><code>            \"profileConformance\": [\n                \"core\",\n                \"software\"\n            ],\n</code></pre> <p>In this case, we are saying this document conforms to the <code>core</code> profile (all SPDX documents should include this), and the <code>software</code> profile, since we will be describing some software later.</p> <p>The final property we need to define is rootElement. This property is a list of Element (or any subclass of Element) references. Add this now and close our our SpdxDocument:</p> <pre><code>            \"rootElement\": [\n                \"https://spdx.org/spdxdocs/BOM-e2e955f5-c50e-4a3a-8c69-db152f0f4615\"\n            ]\n        },\n</code></pre> <p>The purpose of this property is to indicate the \"interesting\" element(s) in the document. Since a document can contain a large number of elements, it might be difficult for a consumer of the document to know what the focus of the document is. This property clarifies that by suggesting which element(s) a user should look at to start navigating. While it is possible to have more than one root element, it is rare to need more than one.</p> <p>Careful readers of the SpdxDocument documentation will note that we have omitted the element (derived from the ElementCollection parent class). Technically speaking, the property should link to all the elements that are in the document using this property. However because this would be error prone, it is implied that all Element objects present in the <code>@graph</code> (that is, all the objects we are writing) are implicitly added to the element property.</p>","tags":["v3.0"]},{"location":"getting-started/#a-complete-document","title":"A Complete Document!","text":"<p>At this point, we have a completed SPDX document (albeit, one that has an unresolved references in SpdxDocument.rootElement). This is a fully valid document because it has the SPDX 3.0 preamble, and the required SpdxDocument object, which in turn requires a valid CreationInfo, which we've provided. Finally, the CreationInfo requires an Agent to describe who or what created the Elements in the document, which we've provided by writing a Person object which describes you.</p> <p>While this is the minimal example, it may feel long. However, as we continue in the document it should become more apparent how reuse of these 3 objects (particularly the CreationInfo) helps reduce total document size while still conveying precise information. In addition, there are other options to make a more compact document that are not covered yet, such as referring to a external Agent instead of encoding it in the document.</p>","tags":["v3.0"]},{"location":"getting-started/#lets-add-some-software","title":"Lets Add Some Software!","text":"<p>Now that we have the basic valid document, its time to start adding some interesting data to it. Lets start with a fictitious software package called <code>amazing-widget</code> which we distribute as a tarball for users to download and run.</p> <p>To start with, we need to define a software_Package object the defines how our software is distributed. In this case, the software_Package will be describing a tarball which someone can download, but it can be almost any unit of content that can be used to distribute software (either as binaries or source). See the documentation for more details.</p> <p>Lets define our package:</p> <pre><code>        {\n            \"type\": \"software_Package\",\n            \"spdxId\": \"https://spdx.org/spdxdocs/Package-d1db6e61-aebe-4b13-ae73-d0f66018dbe0\",\n            \"creationInfo\": \"_:creationinfo\",\n</code></pre> <p>This should be familiar by now. Note the reuse of our previous CreationInfo.</p> <p>Also note that this is our first element that is outside of the <code>Core</code> profile in SPDX. In this specific case, the class is defined in the <code>Software</code> profile, and as such is prefixed with <code>software_</code>. Any classes and properties that are defined in a profile other than <code>Core</code> will be prefixed with the lower case profile name + <code>_</code> to disambiguate them from classes and properties with the same name in other profiles.</p> <p>Again, we can use Element.name to give the common name for our package:</p> <pre><code>            \"name\": \"amazing-widget\",\n</code></pre> <p>Importantly, even though this is a class defined in the <code>Software</code> profile, name is defined in core so it does not get prefixed. When writing objects, pay attention to which profile the property is defined in, as that sets the prefix (the documentation should make it clear what the serialized name of a property is if you are unsure TODO: It does not yet).</p> <p>Next, we will define what version the <code>amazing-widget</code> package is using software_packageVersion, and where the user could download this package from using software_downloadLocation (both are optional):</p> <pre><code>            \"software_packageVersion\": \"1.0\",\n            \"software_downloadLocation\": \"http://dl.example.com/amazing-widget_1.0.0.tar\",\n</code></pre> <p>These are our first two examples of properties not defined in the <code>Core</code> profile, and as such they get the <code>software_</code> prefix.</p> <p>Now, we should define when this software was packaged using the (optional) builtTime property, so that downstream users can tell how old it is:</p> <pre><code>            \"builtTime\": \"2024-03-06T00:00:00Z\",\n</code></pre> <p>Note that we are back in the <code>Core</code> profile properties here (specifically, builtTime is a property of Artifact in <code>Core</code>)</p> <p>Next, we want to indicate who actually made the package we are describing. This is done using the (optional) originatedBy array property:</p> <pre><code>            \"originatedBy\": [\n                \"http://spdx.org/spdxdocs/Person/JoshuaWatt-141ec767-40f2-4aad-9658-ac2703f3a7d9\"\n            ],\n</code></pre> <p>In this example, you can put a single element that references your Person <code>spdxId</code> here to indicate that you actually made the package. Note that while we are using the same <code>spdxId</code> as we used in the CreationInfo, this is not required. originatedBy is the property that we used to describe who made the actual package being described by the software_Package and not the JSON object itself.</p> <p>Finally, we would like to inform consumers of our SPDX how they can validate the package to ensure its contents have not changed, or to check if a file that they have is the same one being described by this document. This is done using the verifiedUsing property, which is an array of IntegrityMethod objects (or subclasses).</p> <pre><code>            \"verifiedUsing\": [\n                {\n                    \"type\": \"Hash\",\n                    \"algorithm\": \"sha256\",\n                    \"hashValue\": \"f3f60ce8615d1cfb3f6d7d149699ab53170ce0b8f24f841fb616faa50151082d\"\n                }\n            ]\n        },\n</code></pre> <p>Specifically, we are using the Hash subclass of integrity method to indicate that the SHA-256 checksum of the package file is <code>f3f60ce8615d1cfb3f6d7d149699ab53170ce0b8f24f841fb616faa50151082d</code></p>","tags":["v3.0"]},{"location":"getting-started/#whats-in-our-package","title":"Whats in our Package?","text":"<p>Describing that we have a distributed package is a great start, but we are able to go further (although this is not mandatory!). Our next object is going to describe all the files contained in our software_Package by using software_File.</p> <p>Lets get started with our first file, the program executable:</p> <pre><code>        {\n            \"type\": \"software_File\",\n            \"spdxId\": \"https://spdx.org/spdxdocs/File-8f79956e-4089-4166-9a71-457de77e4846\",\n            \"creationInfo\": \"_:creationinfo\",\n            \"name\": \"/usr/bin/amazing-widget\",\n            \"verifiedUsing\": [\n                {\n                    \"type\": \"Hash\",\n                    \"algorithm\": \"sha256\",\n                    \"hashValue\": \"ee4f96ed470ea288be281407dacb380fd355886dbd52c8c684dfec3a90e78f45\"\n                }\n            ],\n            \"builtTime\": \"2024-03-05T00:00:00Z\",\n            \"originatedBy\": [\n                \"http://spdx.org/spdxdocs/Person/JoshuaWatt-141ec767-40f2-4aad-9658-ac2703f3a7d9\"\n            ],\n</code></pre> <p>We've seen all this before, so hopefully it all makes sense.</p> <p>While it's great to have a file, it's not easy to tell what purpose this file serves. We might be able to infer that its an executable program from the name, but SPDX provides the ability for us to directly specify this using the (optional) software_primaryPurpose and software_additionalPurpose properties (derived from sofware_Artifact):</p> <pre><code>            \"software_primaryPurpose\": \"executable\",\n            \"software_additionalPurpose\": [\n                \"application\"\n            ],\n</code></pre> <p>A software_Artifact can have as many purposes a you want to describe, but there should always be a software_primaryPurpose property defined before any software_additionalPurpose are added.</p> <p>Finally, as one last bit of information, we'll say what the copyright text of the program is using the (optional) software_copyrightText property and close out our file:</p> <pre><code>            \"software_copyrightText\": \"Copyright 2024, Joshua Watt\"\n        },\n</code></pre> <p>Lets add one more file for fun. This one will describe a config file for our program:</p> <pre><code>        {\n            \"type\": \"software_File\",\n            \"spdxId\": \"https://spdx.org/spdxdocs/File-77808a5c-7a1b-43d1-9fa9-410a309ca9f3\",\n            \"creationInfo\": \"_:creationinfo\",\n            \"name\": \"/etc/amazing-widget.cfg\",\n            \"verifiedUsing\": [\n                {\n                    \"type\": \"Hash\",\n                    \"algorithm\": \"sha256\",\n                    \"hashValue\": \"89a2e80bc48c4dd10044c441af0fc6fdad5d31b2fa391cb2cf9c51dbf4200ed9\"\n                }\n            ],\n            \"builtTime\": \"2024-03-05T00:00:00Z\",\n            \"originatedBy\": [\n                \"http://spdx.org/spdxdocs/Person/JoshuaWatt-141ec767-40f2-4aad-9658-ac2703f3a7d9\"\n            ],\n            \"software_primaryPurpose\": \"configuration\"\n        },\n</code></pre>","tags":["v3.0"]},{"location":"getting-started/#linking-things-together-with-relationships","title":"Linking things together with Relationships","text":"<p>Now we've described our software_Package, and two software_Files that should be contained in it, but we have one small problem: there is nothing that tells us that our files are actually contained by the package.</p> <p>In order to do this, we must introduce the SPDX Relationship. These are a very powerful concept in SPDX that allows linking Elements and describing how they are related.</p> <p>Relationships themselves are also derived from SPDX Elements, so we need the required three properties to start a new one:</p> <pre><code>        {\n            \"type\": \"Relationship\",\n            \"spdxId\": \"https://spdx.org/spdxdocs/Relationship/contains-6b0b7ce4-a069-406d-9088-9e91f65b79f0\",\n            \"creationInfo\": \"_:creationinfo\",\n</code></pre> <p>Next, we need to say what the relationship between our objects is going to be. We do this using the relationshipType property:</p> <pre><code>            \"relationshipType\": \"contains\",\n</code></pre> <p>The full list of what a Relationship can describe is defined by the RelationshipType vocabulary (a fancy work for enumeration). There are a lot of possible options, and each one has a specific meaning and restrictions on what types it can relate, so read the documentation to find the specific one you need and how to use it. In our case, we are using <code>contains</code> which is defined as \"The <code>from</code> Element contains each <code>to</code> Element\". Perfect.</p> <p>Now, we need to describe what Elements are being connected. Relationships always have a directionality associated with them: you can think of them as an arrow pointing from their from property to their to properties. from is always required and must be a single object, whereas to is a list of zero or more objects. Lets write the JSON to express this:</p> <pre><code>            \"from\": \"https://spdx.org/spdxdocs/Package-d1db6e61-aebe-4b13-ae73-d0f66018dbe0\",\n            \"to\": [\n                \"https://spdx.org/spdxdocs/File-8f79956e-4089-4166-9a71-457de77e4846\",\n                \"https://spdx.org/spdxdocs/File-77808a5c-7a1b-43d1-9fa9-410a309ca9f3\"\n            ],\n</code></pre> <p>This is the minimum required to define a Relationship, but we want to add one more property to convey additional information and close out the object:</p> <pre><code>            \"completeness\": \"complete\"\n        },\n</code></pre> <p>The completeness property is very useful as it indicates if we know that this Relationship can be considered to describe all we know about the type of relationship or not. For example, by stating that this relationship is <code>complete</code>, we are saying that our package contains those 2 files, and only those 2 files. We could have also stated that the relationship was <code>incomplete</code> in which case we are stating that we know we didn't list all the files, and other are included. Alternatively, we could have stated that the relationship completeness was <code>noAssertion</code> meaning we don't know if we captured all the files or not. If this property is omitted, it's assumed to be <code>noAssertion</code>.</p>","tags":["v3.0"]},{"location":"getting-started/#wrapping-it-all-up-in-a-bom","title":"Wrapping it all up in a BOM","text":"<p>We've made great progress, and we are almost done. For our final step, we want to wrap up everything we know about the package into a \"Software Bill of Materials\".</p> <p>This is done by creating a software_Sbom object:</p> <pre><code>        {\n            \"type\": \"software_Sbom\",\n            \"spdxId\": \"https://spdx.org/spdxdocs/BOM-e2e955f5-c50e-4a3a-8c69-db152f0f4615\",\n            \"creationInfo\": \"_:creationinfo\",\n</code></pre> <p>Note that this is the object referenced by the rootElement of our SpdxDocument, since it is the primary subject of our entire document.</p> <p>software_Sbom derives from ElementCollection just like SpdxDocument, so it has the same rootElement property. In this case, it is the subject of the SBOM, which is our software_Package:</p> <pre><code>            \"rootElement\": [\n                \"https://spdx.org/spdxdocs/Package-d1db6e61-aebe-4b13-ae73-d0f66018dbe0\"\n            ],\n</code></pre> <p>Unlike SpdxDocument however, there is no implicit value for the element property. Instead, we need to list all the elements that are part of this SBOM (think of this as the line items in the SBOM). In our specific case, this is the software_Files that part of our package, but if you had any other elements related to the package (e.g. licenses, security information, etc.) those would also be included:</p> <pre><code>            \"element\": [\n                \"https://spdx.org/spdxdocs/File-8f79956e-4089-4166-9a71-457de77e4846\",\n                \"https://spdx.org/spdxdocs/File-77808a5c-7a1b-43d1-9fa9-410a309ca9f3\"\n            ],\n</code></pre> <p>Finally, we need to specify what type(s) of BOM this is using the software_sbomType property:</p> <pre><code>            \"software_sbomType\": [\n                \"build\"\n            ]\n        }\n</code></pre> <p>This property is effectively indicating at what point in the software lifecycle this SBOM was generated. Since we are describing an executable program, <code>build</code> seems the most likely.</p>","tags":["v3.0"]},{"location":"getting-started/#closing-it-all-up","title":"Closing it all up","text":"<p>Now that we are all done, we have a few things to clean up, namely that we need to close the <code>@graph</code> list and the root object, so lets do that now:</p> <pre><code>    ]\n}\n</code></pre> <p>Congratulations! You just wrote your first SPDX document! Hopefully this walk through has been instructive and you are ready to get started with SPDX!</p>","tags":["v3.0"]},{"location":"including-security-info-in-spdx/","title":"Including security information in a SPDX document","text":"<p>The flexibility of SPDX 3.0 allows users to either link SBOMs to external security vulnerability data or to embed security vulnerability information in the SPDX 3.0 data format. For more details about the differences, read \"Capturing Software Vulnerability Data in SPDX 3.0\".</p>","tags":["security","v3.0"]},{"location":"including-security-info-in-spdx/#1-external-references-and-external-identifiers","title":"1 External References and External Identifiers","text":"<p>SPDX 3.0 has the concept of an External Reference for an Element which points to a general resource outside the scope of the SPDX-3.0 content that provides additional context or information about an Element.</p> <p>The specification for External Reference types has many type options, a large handful of which pertain specifically to security use cases:</p> <ul> <li>cwe</li> <li>secureSoftwareAttestation</li> <li>securityAdvisory</li> <li>securityAdversaryModel</li> <li>securityFix</li> <li>securityOther</li> <li>securityPenTestReport</li> <li>securityPolicy</li> <li>securityThreatModel</li> <li>vulnerabilityDisclosureReport</li> <li>vulnerabilityExploitabilityAssessment</li> </ul> <p>SPDX 3.0 also has the concept of External Identifier which should be used in cases where an identifier scheme exists and is already defined for an Element outside of SPDX-3.0.</p> <p>There are several External Identifier types that may be used in a security context:</p> <ul> <li>cpe22</li> <li>cpe23</li> <li>cve</li> <li>packageUrl</li> <li>securityOther</li> </ul> <p>This section provides usage scenarios of how to leverage the Security External References and External Identifiers specified above to refer to external security information. Examples of how to use each category can be found in the Security/Classes pages. Multiple instances and types of external security information may be included within a SPDX document.</p>","tags":["security","v3.0"]},{"location":"including-security-info-in-spdx/#11-linking-to-an-advisory","title":"1.1 Linking to an Advisory","text":"<p>To reference a Common Vulnerabilities and Exposures (CVE) advisory applicable to a package, you must first create a Vulnerability Element. You can then use ExternalIdentifiers or ExternalRefs to supplement the CVE with associated external metadata.</p> <pre><code>{\n  \"type\": \"security_Vulnerability\",\n  \"spdxId\": \"urn:spdx.dev:cve-2020-2849\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"summary\": \"Use of a Broken or Risky Cryptographic Algorithm\",\n  \"description\": \"The npm package `elliptic` before version 6.5.4 are vulnerable to Cryptographic Issues via the secp256k1 implementation in elliptic/ec/key.js. There is no check to confirm that the public key point passed into the derive function actually exists on the secp256k1 curve. This results in the potential for the private key used in this implementation to be revealed after a number of ECDH operations are performed.\",\n  \"security_modifiedTime\": \"2021-03-08T16:06:43Z\",\n  \"security_publishedTime\": \"2021-03-08T16:02:50Z\",\n  \"externalIdentifier\": [\n    {\n      \"type\": \"ExternalIdentifier\",\n      \"externalIdentifierType\": \"cve\",\n      \"identifier\": \"CVE-2020-2849\",\n      \"identifierLocator\": [\n        \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28498\",\n        \"https://www.cve.org/CVERecord?id=CVE-2020-28498\"\n      ],\n      \"issuingAuthority\": \"urn:spdx.dev:agent-cve.org\"\n    },\n    {\n      \"type\": \"ExternalIdentifier\",\n      \"externalIdentifierType\": \"securityOther\",\n      \"identifier\": \"GHSA-r9p9-mrjm-926w\",\n      \"identifierLocator\": [\"https://github.com/advisories/GHSA-r9p9-mrjm-926w\"]\n    }\n  ],\n  \"externalRef\": [\n    {\n        \"type\": \"ExternalRef\",\n        \"externalRefType\": \"securityAdvisory\",\n        \"locator\": [\"https://nvd.nist.gov/vuln/detail/CVE-2020-28498\"]\n    },\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"securityAdvisory\",\n      \"locator\": [\"https://ubuntu.com/security/CVE-2020-28498\"]\n    },\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"securityOther\",\n      \"locator\": [\"https://github.com/indutny/elliptic/pull/244/commits\"]\n    }\n  ]\n},\n</code></pre>","tags":["security","v3.0"]},{"location":"including-security-info-in-spdx/#12-linking-to-a-csaf-document","title":"1.2 Linking to a CSAF Document","text":"<p>To reference CSAF formatted security information see below for examples.</p>","tags":["security","v3.0"]},{"location":"including-security-info-in-spdx/#121-linking-to-a-csaf-vex","title":"1.2.1 Linking to a CSAF VEX","text":"<p>To reference a CSAF VEX document, include an external reference of type <code>vulnerabilityExploitabilityAssessment</code> on the Vulnerability Element that encapsulates the CVE described in the CSAF VEX document.</p> <pre><code>{\n  \"type\": \"security_Vulnerability\",\n  \"spdxId\": \"urn:spdx.dev:vuln-2\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"name\": \"cve-2021-44228\",\n  \"description\": \"Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled.\",\n  \"security_modifiedTime\": \"2021-03-08T16:02:43Z\",\n  \"security_publishedTime\": \"2021-03-08T16:06:50Z\",\n  \"externalIdentifier\": [\n    {\n      \"type\": \"ExternalIdentifier\",\n      \"externalIdentifierType\": \"cve\",\n      \"identifier\": \"CVE-2021-44228\",\n      \"identifierLocator\": [\n        \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228\",\n        \"https://www.cve.org/CVERecord?id=CVE-2021-44228\"\n      ],\n      \"issuingAuthority\": \"http://spdx.dev/agent-cve.org\"\n    }\n  ],\n  \"externalRef\": [\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"vulnerabilityExploitabilityAssessment\",\n      \"locator\": [\"https://github.com/oasis-tcs/csaf/blob/master/csaf_2.0/examples/csaf/csaf_vex/2022-evd-uc-01-a-001.json\"]\n    }\n  ]\n},\n</code></pre>","tags":["security","v3.0"]},{"location":"including-security-info-in-spdx/#122-linking-to-a-csaf-advisory","title":"1.2.2 Linking to a CSAF Advisory","text":"<p>To reference a CSAF Advisory document, include the document locator as an external reference of type <code>securityAdvisory</code> on a Package Element.</p> <pre><code>{\n  \"type\": \"software_Package\",\n  \"spdxId\": \"urn:spdx.dev:pkg-rh-open-shift\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"name\": \"Red Hat OpenShift Enterprise\",\n  \"software_packageVersion\": \"3.6\",\n  \"externalRef\": [\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"securityOther\",\n      \"locator\": [\"https://github.com/oasis-tcs/csaf/blob/master/csaf_2.0/examples/csaf/rhsa-2019_1862.json\"]\n    }\n  ]\n},\n</code></pre>","tags":["security","v3.0"]},{"location":"including-security-info-in-spdx/#13-linking-to-cyclonedx-security-data","title":"1.3 Linking to CycloneDX Security Data","text":"<p>To reference to CycloneDX formatted security information applicable to a package you need to first create a Package Element.</p> <p>Using an External Reference, link the package to the matching component in the CycloneDX BOM. Link to it using its BOM link, a URN formed by combining the CycloneDX serial number, version and bom-ref which contains the security information about the package.</p> <pre><code>{\n  \"type\": \"software_Package\",\n  \"spdxId\": \"urn:spdx.dev:pkg-stack-cors\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"name\": \"stack-cors\",\n  \"software_packageVersion\": \"1.3.0\",\n  \"externalRef\": [\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"securityOther\",\n      \"locator\": [\"https://cyclonedx.org/capabilities/bomlink/17cfc349-c637-4685-856c-81196420c7f5/2#componentRef\"]\n    }\n  ]\n},\n</code></pre>","tags":["security","v3.0"]},{"location":"including-security-info-in-spdx/#14-linking-to-an-osv","title":"1.4 Linking to an OSV","text":"<p>To include a reference to Open Source Vulnerability (OSV) formatted security information applicable to a package you need to first create a Package Element. Then use an External Reference to link to the OSV advisory.</p> <pre><code>{\n  \"type\": \"software_Package\",\n  \"spdxId\": \"urn:spdx.dev:pkg-Django\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"name\": \"Django\",\n  \"software_packageVersion\": \"2.2\",\n  \"externalRef\": [\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"securityAdvisory\",\n      \"locator\": [\"https://github.com/github/advisory-database/blob/6b9d5bc96a62bb845ee71e4551a214eb1457e2c6/advisories/github-reviewed/2022/04/GHSA-2gwj-7jmv-h26r/GHSA-2gwj-7jmv-h26r.json\"]\n    }\n  ]\n},\n</code></pre>","tags":["security","v3.0"]},{"location":"including-security-info-in-spdx/#15-linking-to-an-omnibor-formerly-known-as-gitbom","title":"1.5 Linking to an OmniBOR (formerly known as GitBOM)","text":"<p>To identify a Package with an OmniBOR (Universal Bill Of Receipts, formerly known as GitBOM) gitoid, use an External Identifier to add gitoid to the package.</p> <pre><code>{\n  \"type\": \"software_Package\",\n  \"spdxId\": \"urn:spdx.dev:pkg-example\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"name\": \"Example\",\n  \"software_packageVersion\": \"1.2.3\",\n  \"externalIdentifier\": [\n    {\n      \"type\": \"ExternalIdentifier\",\n      \"externalIdentifierType\": \"gitoid\",\n      \"identifier\": \"gitoid:blob:sha1:bcb99b819dadaebdf2c8f88d92ee9024c45f9df3\"\n    }\n  ]\n},\n</code></pre>","tags":["security","v3.0"]},{"location":"including-security-info-in-spdx/#16-linking-to-a-vulnerability-disclosure-document","title":"1.6 Linking to a vulnerability disclosure document","text":"<p>To express a reference to a vulnerability disclosure document for a package, use an External Reference for a Package Element. The example below shows Cisco\u2019s response to Apache log4j vulnerability.</p> <pre><code>{\n  \"type\": \"software_Package\",\n  \"spdxId\": \"urn:spdx.dev:pkg-apache-log4j\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"name\": \"log4j\",\n  \"software_packageVersion\": \"2.14.0\",\n  \"externalRef\": [\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"securityAdvisory\",\n      \"locator\": [\"https://sec.cloudapps.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-apache-log4j-qRuKNEbd\"]\n    }\n  ]\n},\n</code></pre> <p>To communicate that a package is not vulnerable to a specific vulnerability it is recommended to reference a web page indicating why given vulnerabilities are not applicable using an External Reference on the package.</p> <pre><code>{\n  \"type\": \"software_Package\",\n  \"spdxId\": \"urn:spdx.dev:example-1\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"name\": \"example\",\n  \"software_packageVersion\": \"1.0.0\",\n  \"externalRef\": [\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"securityAdvisory\",\n      \"locator\": [\"https://example.com/product-x/security-info-not-affected.html\"]\n    }\n  ]\n},\n</code></pre> <p>To refer to a security disclosure feed, such as the security bulletins from CERT-EU, include an External Reference in the package Element.</p> <pre><code>{\n  \"type\": \"software_Package\",\n  \"spdxId\": \"urn:spdx.dev:example-2\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"name\": \"example\",\n  \"software_packageVersion\": \"2.0.0\",\n  \"externalRef\": [\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"securityAdvisory\",\n      \"locator\": [\"https://cert.europa.eu/cert/Data/newsletter/reviewlatest-SecurityBulletins.xml\"]\n    }\n  ]\n},\n</code></pre>","tags":["security","v3.0"]},{"location":"including-security-info-in-spdx/#17-linking-to-a-code-fix-for-a-security-issue","title":"1.7 Linking to a Code Fix for a Security Issue","text":"<p>You can include a reference to a code fix for a security issue applicable to a Package or Vulnerability Element.</p> <p>Using the Vulnerability Element from example 1.1 above or a Package Element, you would add a code fix External Reference to the Element as follows. In this example, the link points to a specific code revision containing the fix for CVE-2020-28498.</p> <pre><code>{\n  \"type\": \"software_Package\",\n  \"spdxId\": \"urn:spdx.dev:example-2\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"name\": \"example\",\n  \"software_packageVersion\": \"2.0.0\",\n  \"externalRef\": [\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"securityFix\",\n      \"locator\": [\"https://github.com/indutny/elliptic/commit/441b7428b0e8f6636c42118ad2aaa186d3c34c3f\"],\n      \"comment\": \"elliptic before version 6.5.4 are vulnerable to Cryptographic Issues via the secp256k1 implementation in elliptic/ec/key.js. This patch fixes CVE-2020-28498.\"\n    }\n  ]\n},\n</code></pre> <p>A fix reference may point to a configuration change for example the patch file as one of the fixes for CVE-2022-26499.</p> <pre><code>{\n  \"type\": \"software_Package\",\n  \"spdxId\": \"urn:spdx.dev:example-2\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"name\": \"example\",\n  \"software_packageVersion\": \"2.0.0\",\n  \"externalRef\": [\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"securityFix\",\n      \"locator\": [\"https://downloads.digium.com/pub/security/AST-2022-002-16.diff\"]\n    }\n  ]\n},\n</code></pre> <p>Alternatively, it may also link to a landing page with patches for a variety of products such as Oracle patch information for CVE-2021-44228.</p> <pre><code>{\n  \"type\": \"software_Package\",\n  \"spdxId\": \"urn:spdx.dev:example-2\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"name\": \"example\",\n  \"software_packageVersion\": \"2.0.0\",\n  \"externalRef\": [\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"securityFix\",\n      \"locator\": [\"https://www.oracle.com/security-alerts/cpujan2022.html\"]\n    }\n  ]\n},\n</code></pre>","tags":["security","v3.0"]},{"location":"including-security-info-in-spdx/#18-linking-to-any-security-related-document","title":"1.8 Linking to any Security Related Document","text":"<p>If you want to reference any security information related to a package but cannot or do not wish to specify its kind, use the <code>securityOther</code> externalRefType.</p> <pre><code>{\n  \"type\": \"software_Package\",\n  \"spdxId\": \"urn:spdx.dev:pkg-elliptic\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"name\": \"elliptic\",\n  \"software_packageVersion\": \"6.5.4\",\n  \"externalRef\": [\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"securityOther\",\n      \"locator\": [\"https://github.com/christianlundkvist/blog/blob/aa3a69b5e4c06e4435070610c0c4a2b1e8731783/2020_05_26_secp256k1_twist_attacks/secp256k1_twist_attacks.md\"],\n      \"comment\": \"Blog post from author who wrote fix for CVE-2020-28498.\"\n    }\n  ]\n},\n</code></pre> <p>One can also use it to refer to guidance related to a vulnerability such as CISA guidance for Apache Log4j.</p> <pre><code>{\n  \"type\": \"software_Package\",\n  \"spdxId\": \"urn:spdx.dev:pkg-apache-log4j\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"name\": \"log4j\",\n  \"software_packageVersion\": \"2.14.0\",\n  \"externalRef\": [\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"securityOther\",\n      \"locator\": [\"https://www.cisa.gov/uscert/apache-log4j-vulnerability-guidance\"]\n    }\n  ]\n},\n</code></pre>","tags":["security","v3.0"]},{"location":"including-security-info-in-spdx/#19-linking-to-a-vulnerability-disclosure-report-vdr","title":"1.9 Linking to a Vulnerability Disclosure Report (VDR)","text":"<p>The National Institute of Standards and Technology (NIST) describes the concept of correlating vulnerability and SBOM information for a software product at the component level in \u201cSoftware Security in Supply Chains: Software Bill of Materials (SBOM)\u201d. Use the External Reference <code>vulnerabilityDisclosureReport</code> type to report on vulnerabilities related to the components contained in a software product\u2019s SBOM.</p> <p>This enables a software producer to articulate to software consumers the status of vulnerabilities contained in the software product, by means of reporting vulnerability information at either the SBOM document or component level.</p> <p>Providing a link to such data at the time the SBOM is published provides a pointer for where to find this relevant vulnerability information without promulgating vulnerability information inside the SBOM. This is advantageous because the vulnerability information has a short shelf-life (it will change frequently) while the SBOM component data isn\u2019t likely to change if the software has not changed.</p> <pre><code>{\n  \"type\": \"software_Package\",\n  \"spdxId\": \"urn:spdx.dev:sag-pm\",\n  \"creationInfo\": \"_:creationInfo\",\n  \"name\": \"SAG-PM (TM)\",\n  \"software_packageVersion\": \"1.1.8\",\n  \"externalRef\": [\n    {\n      \"type\": \"ExternalRef\",\n      \"externalRefType\": \"vulnerabilityDisclosureReport\",\n      \"locator\": [\"https://github.com/rjb4standards/REA-Products/blob/master/SBOM_and_VDRbaseline/sag-pm-118_VDR.json\"]\n    }\n  ]\n},\n</code></pre>","tags":["security","v3.0"]},{"location":"using-spdx-short-id-in-source-files/","title":"Using SPDX License List short identifiers in source files","text":"<p>TODO: update for SPDXv3</p>","tags":["license","compliance"]},{"location":"using-spdx-short-id-in-source-files/#introduction","title":"Introduction","text":"<p>Identifying the license for open source software is critical for both reporting purposes and license compliance. However, determining the license can sometimes be difficult due to a lack of information or ambiguous information. Even when licensing information is present, a lack of consistent notation can make automating the task of license detection very difficult, thus requiring vast amounts of human effort.</p> <p>Short identifiers from the SPDX License List can be used to indicate license info at the file level. The advantages of doing this are numerous but include:</p> <ul> <li>It is precise.</li> <li>It is concise.</li> <li>It is language neutral.</li> <li>It is easy and more reliable to machine process.</li> <li>Leads to code that is easier to reuse.</li> <li>The license information travels with the file (as sometimes not entire projects are used or license files are removed).</li> <li>It is a standard and can be universal. There is no need for variation.</li> <li>An SPDX short identifier is immutable.</li> <li>Easy look-ups and cross-references to the SPDX License List website.</li> </ul> <p>If using SPDX short identifiers in individual files, it is recommended to reproduce the full license in the projects LICENSE file and indicate that SPDX short identifiers are being used to refer to it. For links to projects illustrating these scenarios, see https://spdx.dev/ids-where.</p>","tags":["license","compliance"]},{"location":"using-spdx-short-id-in-source-files/#format-for-spdx-license-identifier","title":"Format for <code>SPDX-License-Identifier</code>","text":"<p>The <code>SPDX-License-Identifier</code> tag declares the license the file is under and should be placed at or near the top of the file in a comment.</p> <p>The SPDX License Identifier syntax may consist of a single license (represented by a short identifier from the SPDX License List) or a compound set of licenses (represented by joining together multiple licenses using the license expression syntax).</p> <p>The tag should appear on its own line in the source file, generally as part of a comment.</p> <pre><code>SPDX-License-Identifier: &lt;SPDX License Expression&gt;\n</code></pre>","tags":["license","compliance"]},{"location":"using-spdx-short-id-in-source-files/#representing-single-license","title":"Representing single license","text":"<p>A single license is represented by using the short identifier from SPDX License List, optionally with a unary \"+\" operator following it to indicate \"or later\" versions may be applicable.</p> <p>Examples:</p> <pre><code>SPDX-License-Identifier: CDDL-1.0+\nSPDX-License-Identifier: MIT\n</code></pre>","tags":["license","compliance"]},{"location":"using-spdx-short-id-in-source-files/#representing-multiple-licenses","title":"Representing multiple licenses","text":"<p>Multiple licenses can be represented using an SPDX license expression as defined in the specification Annex. A set of licenses may optionally be enclosed in parentheses, but are not required to be enclosed. As further described there:</p> <ol> <li>When there is a choice between licenses (\"disjunctive license\"), they should be separated with \"OR\". If presented with a choice between two or more licenses, use the disjunctive binary \"OR\" operator to construct a new license expression.</li> <li>Similarly when multiple licenses need to be simultaneously applied (\"conjunctive license\"), they should be separated with \"AND\". If required to simultaneously comply with two or more licenses, use the conjunctive binary \"AND\" operator to construct a new license expression.</li> <li>In some cases, a set of license terms apply except under special circumstances, in this case, use the \"WITH\" operator followed by one of the recognized exception identifiers or a custom addition.</li> <li>The expression MUST be on a single line, and MUST NOT include a line break in the middle of the expression.</li> </ol> <p>Examples:</p> <pre><code>SPDX-License-Identifier: GPL-2.0-only OR MIT\nSPDX-License-Identifier: LGPL-2.1-only AND BSD-2-Clause\nSPDX-License-Identifier: GPL-2.0-or-later WITH Bison-exception-2.2\n</code></pre> <p>Please see the specification Annex for more examples and details of the license expression specific syntax.</p> <p>If you can\u2019t express the license(s) as an expression using identifiers from the SPDX list, it is probably best to just put the text of your license header in the file (if there is a standard header), or refer to a neutral site URL where the text can be found. To request a license be added to the SPDX License List, please follow the process described here: https://github.com/spdx/license-list-XML/blob/master/CONTRIBUTING.md.</p> <p>Alternatively, you can use a <code>LicenseRef-</code> custom license identifier to refer to a license that is not on the SPDX License List, such as the following:</p> <pre><code>SPDX-License-Identifier: LicenseRef-my-special-license\n</code></pre> <p>The <code>LicenseRef-</code> format is defined in the SPDX specification Annex defining license expressions. When using a custom <code>LicenseRef-</code> identifier, you will also need to provide a way for others to determine what license text corresponds to it. The REUSE Software Specification provides a standardized format that can optionally be used for providing the corresponding license text for these identifiers.</p>","tags":["license","compliance"]},{"location":"using-spdx-to-comply-with-norms/","title":"Using SPDX to comply with norms, standards and regulation","text":"","tags":["compliance","v3.0"]},{"location":"using-spdx-to-comply-with-norms/#satisfying-ntia-minimum-elements-for-an-sbom-using-spdx-us-executive-order-14028","title":"Satisfying NTIA Minimum Elements for an SBOM using SPDX / US Executive Order 14028","text":"<p>US Executive Order 14028 in conjunction with the National Telecommunications and Information Administration (NTIA) outlined minimum elements for an SBOM. The minimum elements are detailed in NTIA's Framing Software Component Transparency: Establishing a Common Software Bill of Maternials and The Minimum Elements for a SBOM documents and summarized below:</p> SBOM Minimum Field Description Author Name Author of the SBOM entry (this may not always be the supplier). Supplier Name Name or identity of the supplier of the component in the SBOM entry. Component Name Designation assigned to a unit of software defined by the original supplier. Version String Version used to identify a component. Component Hash A cryptographic hash to uniquely identify a component. Unique Identifier A unique identifier to help identify components or serve as a look-up key for relevant databases. Relationship Characterizing the relationship that an upstream component X is included in software Y. Timestamp Record of the date and time of the SBOM data assembly. <p>The SPDX Specification contains fields able to address each of the NTIA minimum required data fields.</p> NTIA SBOM Minimum Field Satisfying SPDX field model location Author Name Core/Classes/CreationInfo.createdBy Supplier Name Core/Classes/Artifact.suppliedBy Component Name Software/Classes/Package.name inherited from Core/Classes/Element.name Version String Software/Classes/Package.packageVersion Component Hash Core/Classes/Element.verifiedUsing Unique Identifier Software/Classes/SoftwareArtifact.contentIdentifier for SPDX Software Artifacts or Software/Classes/Package.packageUrl if the packageUrl is considered to be unique,or Core/Classes/Element.externalIdentifier for resources outside the scope of SPDX-3.0 content Relationship Core/Classes/Relationship Timestamp Core/Classes/CreationInfo.created","tags":["compliance","v3.0"]},{"location":"using-spdx-to-comply-with-norms/#bsi-tr-03183-technical-guideline-cyber-resilience-requirements-for-manufacturers-and-products","title":"BSI TR-03183 - Technical Guideline Cyber Resilience Requirements for Manufacturers and Products","text":"<p>The German BSI is actively propagating its technical guideline in preparation for adopting and detailing the requirements of the EU Cyber Resilience Act becoming effective in 2027.</p> <p>The guideline can be regarded as German equivalent of the US Executive Order 14028. Nevertheless, BSI is exploring various options and recommendations to further detail the content of SBOMs.</p> <p>Important elements of the guideline in the context of SPDX:</p> <ul> <li>The guideline references SPDX as one of the exchange formats for SBOMs.</li> <li>It defines levels of details as well as mandatory and optional data fields.</li> <li>The guideline scopes the content (dependency relationships) of an SBOM   (top-level, n-level, transitive, delivery item, complete).</li> <li>Different types of SBOMs (design, source, build, analysed, deployed, runtime)   are defined.</li> </ul> <p>The guideline (available in version 1.1) is currently being revised by the BSI. Draft versions of the future 2.0 document are circulated by the BSI to collect review comments.</p> <p>See BSI Technical Guideline TR-03183.</p>","tags":["compliance","v3.0"]},{"location":"diff/v2.0-v1.2/","title":"Differences between V2.0 and V1.2","text":"<ul> <li> <p>Abstraction has been applied to the underlying model with the inclusion of   SPDX elements. With SPDX 2.0, the concept of an SPDX element is introduced   (see Appendix III). This includes SPDX documents, SPDX files, and SPDX   packages, each of which gets associated with an SPDX identifier which is   denoted by \u201cSPDXRef-\u201d.</p> </li> <li> <p>SPDX relationships have been added to allow any SPDX element to have a   relationship to other SPDX elements. Documented the origin of an SPDX   hierarchy of sub-packages, documenting the origin of an SPDX element, and   documenting modifications or corrections (annotations) to an SPDX element.</p> </li> <li> <p>The ability to reference SPDX elements outside the current SPDX document   itself (external references).</p> </li> <li> <p>Additional file types are now supported.</p> </li> <li> <p>Additional checksum algorithms are now supported.</p> </li> <li> <p>Review Information section is deprecated. It is recommended to provide   document reviews with Annotations (Section 7).</p> </li> <li> <p>A License Expression Syntax has been introduced and documented in   Appendix IV.</p> </li> </ul>","tags":["v2.0","v1.2"]},{"location":"diff/v2.1-v2.0/","title":"Differences between V2.1 and V2.0","text":"<ul> <li> <p>Snippets have been added to allow a portion of a file to be identified as   having different properties from the file it resides in.   The use of snippets is completely optional and it is not mandatory for   snippets to be identified. See section 5 Snippet Information for further   details on the fields available to describe snippets.</p> </li> <li> <p>External Packages can now be referred to in SPDX documents.   When there is no SPDX file information available to document the content of   these external packages, then the filesAnalyzed attribute on a package should   be set to false. See section 3.8 Files Analyzed for more information.</p> </li> <li> <p>Packages are now able to associate with an \u201cExternal Reference\u201d which allows   a Package to reference an external source of additional information,   metadata, enumerations, asset identifiers, or downloadable content believed   to be relevant to the Package.   See: section 3.21  External Reference, 3.22 External Reference Comment and   Appendix VI:  External Repository Identifiers for more information.</p> </li> <li> <p>The \u201cArtifact of Project\u201d fields at the file level are now deprecated,   as they can be replaced by a relationship to the more descriptive   External Packages.</p> </li> <li> <p>A new appendix \u201cUsing SPDX short identifiers in Source Files\u201d has been added   to document the best practices to refer to the licenses in the SPDX license   list that have emerged from the development community.   See Appendix V: Using SPDX short identifiers in Source Files for more   information.</p> </li> <li> <p>Miscellaneous bug fixes.</p> </li> </ul>","tags":["v2.1","v2.0"]},{"location":"diff/v2.2-v2.1/","title":"Differences from V2.2 and V2.1","text":"<ul> <li> <p>JSON, YAML, and a development version of XML have been added as supported   file formats.</p> </li> <li> <p>A new appendix \"SPDX File Tags\" has been added to describe a method that   developers can use to document other SPDX file-specific information   (such as copyright notices, file type, etc.) in a standardized and easily   machine-readable manner. See Appendix IX for more information.</p> </li> <li> <p>A new appendix \"SPDX Lite\" has been added to document a lightweight subset of   the SPDX specification for scenarios where a full SPDX document is not   required. See Appendix VIII for more information.</p> </li> <li> <p>Additional relationship options have been added to enable expression of   different forms of dependencies between SPDX elements. As well, NONE and   NOASSERTION keywords are now permitted to be used with relationships to   indicate what is unknown.</p> </li> <li> <p>Miscellaneous bug fixes and non-breaking improvements as reported on the   mailing list and reported as issues on the spdx-spec GitHub repository.</p> </li> </ul>","tags":["v2.2","v2.1"]},{"location":"diff/v2.2.1-v2.2/","title":"Differences between V2.2.1 and V2.2","text":"<p>There were no technical differences; V2.2.1 is V2.2 reformatted for submission to ISO via the PAS process.</p> <p>As a result, new clauses were added causing the previous clause-numbering sequence to change. Also, Annexes went from having Roman numbers to Latin letters.</p> <p>Here is the translation between numbering in V2.2.1 and the version that came before it:</p> <p>Table 1 \u2014 SPDX V2.2.1 Organizational Changes</p> Title V2.2 V2.2.1 (spdx.dev) V2.2.1 (ISO) Scope N/A Clause 1 Clause 1 Normative references N/A Clause 2 Clause 2 Terms and definitions N/A Clause 3 Clause 3 Conformance N/A Clause 4 Clause 4 Composition of an SPDX document N/A Clause 5 Clause 5 Document Creation Information Chapter 2 Clause 6 Clause 6 Package Information Chapter 3 Clause 7 Clause 7 File Information Chapter 4 Clause 8 Clause 8 Snippet Information Chapter 5 Clause 9 Clause 9 Other Licensing Information Detected Chapter 6 Clause 10 Clause 1 Relationship between SPDX Elements Information Chapter 7 Clause 11 Clause 1 Annotation Information Chapter 8 Clause 12 Clause 1 Review Information (deprecated) Chapter 9 Clause 13 Clause 1 SPDX License List Appendix I Annex A Annex A License Matching Guidelines and Templates Appendix II Annex B Annex B RDF Object Model and Identifier Syntax Appendix III Annex C Annex C SPDX License Expressions Appendix IV Annex D Annex D Using SPDX short identifiers in Source Files Appendix V Annex E Annex E External Repository Identifiers Appendix VI Annex F Annex F Creative Commons Attribution License 3.0 Unported Appendix VII Annex G [omitted] SPDX Lite Appendix VIII Annex H/G* Annex G SPDX File Tags Appendix IX Annex I/H* Annex H Differences from Earlier SPDX Versions N/A Annex J/I* Annex I <p>*This edition featured inconsistent lettering.</p>","tags":["v2.2.1","v2.2"]},{"location":"diff/v2.2.2-v2.2.1/","title":"Differences between V2.2.2 and V2.2.1","text":"<p>V2.2.2 fixed formatting, grammatical and spelling issues found since ISO/IEC 5962:2021 SPDX v2.2.1 was published.</p> <p>No new fields were added.</p> <p>Key changes include:</p> <ul> <li>Clarify Optional Cardinality contradictions</li> <li>Update OWL document</li> <li>Update JSON schema to fix typos and add missing required fields.</li> <li>Clarify Information on using License List short form identifiers.</li> <li>It fixed annex lettering inconsistencies.   It also moved CC-BY-3.0 to the end of the spec to keep annex letters more   consistent in future versions.</li> </ul> <p>Here is the translation between lettering in V2.2.2 and the version that came before it:</p> <p>Table 1 \u2014 SPDX V2.2.2 Organizational Changes</p> Title V2.2.1 (spdx.dev) V2.2.1 (ISO) V2.2.2 SPDX Lite Annex H/G* Annex G Annex G SPDX File Tags Annex I/H* Annex H Annex H Differences from Earlier SPDX Versions Annex J/I* Annex I Annex I Creative Commons Attribution License 3.0 Unported Annex G [omitted] Annex J [omitted in ISO version] <p>*This edition featured inconsistent lettering.</p>","tags":["v2.2.1","v2.2.2"]},{"location":"diff/v2.3-v2.2.2/","title":"Differences between V2.3 and V2.2.2","text":"<p>V2.3 has added new fields to improve the ability to capture security related information and to improve interoperability with other SBOM formats.</p> <p>Key changes include:</p> <ul> <li> <p>Added fields to Clause 7 ( Package Information ) to describe   \"Primary Package Purpose\" and standardize recording of \"Built Date\",   \"Release Date\", \"Valid Until Date\".</p> </li> <li> <p>Added hash algorithms (SHA3-256, SHA3-384, SHA3-512, BLAKE2b-256,   BLAKE2b-384, BLAKE2b-512, BLAKE3, ADLER32 ) to the set recognized by 7.10   (Package Checksum field) and 8.4 (File checksum field)</p> </li> <li> <p>Update Clause 7, 8, and 9 to make several of the licensing properties   optional rather than requiring the use of \"NOASSERTION\" when no value is   provided.</p> </li> <li> <p>Update Clause 11 to add the new relationship types:   REQUIREMENT_DESCRIPTION_FOR and SPECIFICATION_FOR.</p> </li> <li> <p>Update Annex B ( License matching guidelines and templates ) to use the   License List XML format</p> </li> <li> <p>Update Annex F ( External Repository Identifiers ) to expand security   references to include advisory, fix, URL, SWID.   Expand persistent identifiers to include gitoid.</p> </li> <li> <p>Update Annex G ( SPDX Lite Profile ) to include NTIA SBOM mandatory minimum   fields as required.</p> </li> <li> <p>Update Annex H to documented how the snippet information in files to be   consistent with REUSE recommendations.</p> </li> <li> <p>Added Annex K ( How To Use SPDX in Different Scenarios ) to illustrate   linking to external security information, and illustrate how the NTIA SBOM   mandatory minimum elements map to SPDX fields.</p> </li> </ul>","tags":["v2.3","v2.2.2"]},{"location":"diff/v3.0-v2.3/","title":"Differences between V3.0 and V2.3","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-meaning","title":"SPDX meaning","text":"<p>In previous editions of the specification, SPDX meant \"Software Package Data Exchange\".</p> <p>Starting with V3.0, the scope of SPDX has expanded beyond software and now means \"System Package Data Exchange\".</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#structural-differences","title":"Structural Differences","text":"<p>These are the most significant breaking changes requiring a change in logic to handle a different model or structure for the information.</p> <p>Each structural difference will describe the change, describe an approach to translate from 2.3 to 3.0, and provide a rationale for the change.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#external-document-reference","title":"External Document Reference","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#description-of-change","title":"Description of Change","text":"<p>The purpose of the SPDX 2.3 structure \u201cExternalDocumentRef\u201d is now covered by two separate structures:</p> <ul> <li>NamespaceMap which maps short identifiers used in serializations to full   namespace URI\u2019s to support terseness in serialization of element identifiers</li> <li>ExternalMap which maps an element identifier for an element defined   externally to verification and location information</li> </ul> <p>The externalDocumentRef property on the SpdxDocument has been replaced by import property and namespace property.</p> <p>Another change is the SPDX document checksum field has been replaced with a \u201cverifiedUsing\u201d property on the ElementCollection. The \u201cverifiedUsing\u201d which has 0 or more \u201cIntegrityMethod\u201d which should be the checksum of the SPDX document.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#translating-from-23-to-30","title":"Translating from 2.3 to 3.0","text":"<p>Each ExternalDocumentRef instance will translate as follows:</p> <ul> <li>An entry would be created in the Namespace map for the external document   namespace</li> <li>The value of the DocumentRef-[idstring] would be used for the prefix     property in the NamespaceMap.</li> <li>The value of the documentNamespace appended with a \u201c#\u201d would be used for     the namespace in the NamespaceMap.</li> <li>An entry would be created in the ExternalMap for the external document ref</li> <li>A string identifier consisting of the DocumentRef-[idstring] (the same     value as the prefix in the NamespaceMap) concatenated with a \u201c:\u201d and then     concatenated with \u201cSPDXRef-DOCUMENT\u201d would be used for the externalSpdxId     in the ExternalMap.</li> <li>An integrity method of \u201cHash\u201d will be created with the same information as     the checksum property and will be referenced using the \u201cverifiedUsing\u201d     property on the ExternalMap entry.</li> <li>An entry would be created in the ExternalMap for each element referenced in   the current SpdxDocument that is originally specified in the referenced   SpdxDocument.</li> <li>A string identifier consisting of the DocumentRef-[idstring] (the same     value as the prefix in the NamespaceMap) concatenated with a \u201c:\u201d and then     concatenated with the local portion of the element identifier would be used     for the externalSpdxId in the ExternalMap</li> <li>A \u201cdefiningDocument\u201d property would be specified containing a string     identifier consisting of the DocumentRef-[idstring] concatenated with     a \u201c:\u201d and then concatenated with \u201cSPDXRef-DOCUMENT\u201d. This is a shortcut     linkage to tie the referenced element to its defining SpdxDocument for     verification and location information.</li> </ul>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale","title":"Rationale","text":"<p>A key difference between SPDX 2.3 and SPDX 3.0 is that in SPDX 2.3 elements are always expressed within or referenced in relation to a single enclosing SpdxDocument while in SPDX 3.0 a key design principle is that all elements may be expressed and referenced independent of any other element including SpdxDocument. This independence is required to support a variety of content exchange and analysis use cases.</p> <p>For example, in SPDX 2.3 if you wish to express even a single package you specify it within an SpdxDocument and its identifier namespace is restricted to the namespace of the SpdxDocument. In SPDX 3.0 you could specify a single package within an SpdxDocument element (or any other subclass of ElementCollection such as Bundle, Bom, Sbom, etc.) but you could also simply specify it on its own without any enclosing collection element. In addition, in SPDX 3.0 the identifier of the package may share a namespace with an enclosing collection element such as SpdxDocument if desired but it is equally valid for it to have any namespace desired unconstrained by any other element namespace whether it is expressed within a collection element such as SpdxDocument or not.</p> <p>In this example, in SPDX 2.3 if you referenced the package within the same SpdxDocument that it is defined in you would utilize the local portion of its identifier and presume that the namespace is the same as the SpdxDocument namespace. If you referenced it from an SpdxDocument other than the one it is defined in you would use an ExternalDocumentRef to specify a prefix name for the other SpdxDocument to be used within the current SpdxDocument, the URI namespace/identifier for the other SpdxDocument, and a checksum for the other SpdxDocument. To reference the package you would then use an identifier combining the external document ref prefix and the local portion of the identifier.</p> <p>The ExternalDocumentRef structure in SPDX 2.3 is based on the presumptions that elements are always defined within SpdxDocuments, that external elements can always be referenced via a containing SpdxDocument and that element identifiers have a namespace from their original containing SpdxDocument. None of these three presumptions hold true for SPDX 3.0 so a slightly modified structure is necessary to support the two use cases previously covered by ExternalDocumentRef in SPDX 2.3: 1) the ability to specify identifier namespace prefixes and accompanying namespaces for SPDX elements to support more terse serialized expression of content with integrity across serialization forms, 2) the ability to specify which elements in the current subclass of ElementCollection (e.g., SpdxDocument) are only referenced from that collection and defined elsewhere, along with details regarding their verification and location.</p> <p>The Namespace map structure in SPDX 3.0 fully supports the namespace prefixing use case for SpdxDocuments previously covered by ExternalDocumentRef but also equally covers the same use case capability for all element types and for any number of element identifier namespaces (in SPDX 3.0 all elements within an SpdxDocument are not required to have the same namespace and can actually be any desired mix of namespaces) to support this capability required in SPDX 3.0.</p> <p>The ExternalMap structure in SPDX 3.0 fully supports the external element (including SpdxDocument elements) referencing use case for SpdxDocuments previously covered by ExternalDocumentRef but also equally covers the same use case capability for any elements whether they were originally defined within an SpdxDocument or not to support this capability required in SPDX 3.0.</p> <p>The ExternalMap structure in SPDX 3.0 provides the ability to specify verification and location details for any element, not just SpdxDocuments, if appropriate but also provides simple linkage, using the \u201cdefiningDocument\u201d property, from element entries in the ExternalMap to SpdxDocument entries in the ExternalMap where the elements were defined within the SpdxDocument and verification of the elements can be achieved via proxy to the SpdxDocument \u201cverifiedUsing\u201d information (this is how the SPDX 2.3 ExternalDocumentRef structure currently works).</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#agent","title":"Agent","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#description-of-change_1","title":"Description of Change","text":"<p>The creator property in SPDX 2.3 has been replaced by createdBy and createdUsing properties with a type Agent and Tool resp. The supplier property has been replaced by a property suppliedBy with a type Agent. Additional suppliers can be provided with a a relationship to an availableFrom relationship. The originator property type has been replaced with the originatedBy property with a type Agent.</p> <p>An Agent can be a Person, Organization, or Software Agent. It can also just be an Agent if it is not known what specific type an Agent is.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#translating-from-23-to-30_1","title":"Translating from 2.3 to 3.0","text":"<p>The SPDX 2.3 creator string would be parsed and the appropriate Person, Organization or Tool would be created depending on if the prefix is \u201cPerson:\u201d, \u201cOrganization:\u201d or \u201cTool:\u201d resp. The required createdBy field for Agent or Tool may point to itself if no other information is available. The createdUsing property would be used for Tool whereas the createdBy property would be used for Person and Organization. The name would map to the \u201cname\u201d property. If an email address is present, it would translate to an external identifier.</p> <p>Note that in 3.0 the createdBy is a required field. There will be situations where only a Tool is provided. In that case, createdBy should point to a SoftwareAgent should be created using the same information as the Tool.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_1","title":"Rationale","text":"<p>The 3.0 format is more machine readable and structured (e.g. you do not need to parse the type from the string value). It is also more flexible in that an Agent can be used even if it is not known what the Agent type is.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#file-contributor","title":"File Contributor","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#description-of-change_2","title":"Description of Change","text":"<p>The fileContributor property on File has been replaced by the originatedBy property on Artifact.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#translating-from-23-to-30_2","title":"Translating from 2.3 to 3.0","text":"<p>For each fileContributor string in SPDX 2.3, an Person should be created and added to the originatedBy list for the File artifact.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_2","title":"Rationale","text":"<p>The Artifact property originatedBy should be used to describe file contributor information in place of the fileContributor property.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#file-type","title":"File Type","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#description-of-change_3","title":"Description of Change","text":"<p>The FileType enumeration has been replaced by two fields, the media type string as maintained by IANA for the content of the file and an enumeration of SoftwarePurpose for the purpose of the file.</p> <p>The property name fileType has been replaced by a property name contentType.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#translating-from-23-to-30_3","title":"Translating from 2.3 to 3.0","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_3","title":"Rationale","text":"<p>One of the things that we identified is that <code>FileType</code> was being used for two things:</p> <ol> <li>Describing the purpose of the file.</li> <li>Describing the type of content in the file.</li> </ol> <p>For SPDX 3.0 we split this into two properties:</p> <ul> <li><code>SoftwarePurpose</code> to capture the purpose   (which is of type <code>SoftwarePurpose</code>).</li> <li><code>ContentType</code> to capture the type of content   (which is of type <code>MediaType</code>).</li> </ul> <p>The name <code>ContentType</code> was chosen to mirror the Content-Type header in HTTP (which is also of type MediaType) and to express that this is describing the type of content (as opposed to metadata, headers, or something else). For example, if (and not saying we would) we extended <code>File</code> in the future to be able to capture the type of executable header a file has (e.g. ELF), that could also be of type <code>MediaType</code> but the property name might be <code>ExecutableHeaderType</code>.</p> <p>An example conversion table from SPDX 2.3 <code>FileType</code> to SPDX 3.0 <code>contentType</code> or <code>softwarePurpose</code> can look like this:</p> SPDX 2 File Type SPDX 3 Software Purpose SPDX 3 Content Type ARCHIVE Archive BINARY application/octet-stream SOURCE Source TEXT text/plain APPLICATION Application AUDIO audio/* IMAGE image/* VIDEO video/* DOCUMENTATION Documentation SPDX text/spdx OTHER Other","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#package-file-name","title":"Package File Name","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#description-of-change_4","title":"Description of Change","text":"<p>The packageFileName property and packageChecksum property has been replaced by a relationship from a Package to a File. A relationship type of hasDistributionArtifact should be used.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#translating-from-23-to-30_4","title":"Translating from 2.3 to 3.0","text":"<p>Create an SPDX File with the name from the packageFileName and a verifiedUsing value from the packageChecksum for a single file. If the packageFileName is a directory, then the SPDX File is created with the directory name and is verified using the contentIdentifier property on the File and a fileKind of directory. Create a hasDistributionArifact relationship from the SPDX Package to the SPDX File.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_4","title":"Rationale","text":"<p>Providing a File relationship to the download location will include more detailed and complete information about the package file name used.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#external-identifiers","title":"External Identifiers","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#description-of-change_5","title":"Description of Change","text":"<p>In SPDX 3.0, a properties externalIdentifier and contentIdentifier with types ExternalIdentifier and ContentIdentifier were introduced. This is in addition to retaining the ExternalRef property and classes.</p> <p>In SPDX 2.3, both identifiers and references were captured in the externalRef property for packages.</p> <p>In addition to the structural changes, the \u201curl\u201d ExternalRef type was removed and is replaced by the \u201csecurityOther\u201d ExternalRef type.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#translating-from-23-to-30_5","title":"Translating from 2.3 to 3.0","text":"<p>The following ExternalRef Types should be converted to ExternalIdentifiers:</p> <ul> <li>cpe22Type</li> <li>cpe23Type</li> <li>swid</li> <li>purl</li> </ul> <p>The following ExternalRef Types should be converted to ContentIdentifers:</p> <ul> <li>gitoid</li> <li>swh</li> </ul> <p>All other ExternalRef types should remain as ExternalRef\u2019s.</p> <p>The url ExternalRef type should be converted to a \u201csecurityOther\u201d.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_5","title":"Rationale","text":"<p>Distinguishing identifiers from references is key to several integrity and provenance use cases. Creating a separate property and type enables easier identification of identifiers.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#package-url","title":"Package URL","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#description-of-change_6","title":"Description of Change","text":"<p>In SPDX 3.0, Package URL is a new property for Artifact which is a superclass of Package.</p> <p>Package URL is an External Ref type in SPDX 2.3.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#translating-from-23-to-30_6","title":"Translating from 2.3 to 3.0","text":"<p>If there is a single ExternalReference of type purl without the optional ExternalRef comment property, place that in the packageUrl property.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_6","title":"Rationale","text":"<p>Package URL is  a very common method of identifying software packages. Moving this to a property makes it significantly simpler to find and correlate Package URL identifiers.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#annotation","title":"Annotation","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#description-of-change_7","title":"Description of Change","text":"<p>Annotations are now subclasses of Element, so it inherits a number of new optional properties including names, annotations, and its own relationships.</p> <p>Annotations are no longer a property of an Element. It is now a standalone element with a \u201csubject\u201d field which points to the Element being annotated.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#translating-from-23-to-30_7","title":"Translating from 2.3 to 3.0","text":"<p>A new Annotation element would be created for every annotation property in an element (Package, File or Snippet). The subject property would point to the Element which has the Annotation as a property.</p> <p>The annotator from SPDX 2.3 should be translated to one of the creators for the creationInfo for the Annotation and the annotationDate should be translated to the created field in the same creationInfo. The creationInfo for the Annotation should be the creationInfo of the SPDX 2.3 document.</p> <p>The SPDX 2.3 \u201ccomment\u201d should use the statement field in SPDX 3.0.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_7","title":"Rationale","text":"<p>Changing from a property to a standalone element allows for relationships to exist outside the element itself (e.g. you can now create an amended SPDX document which has a new annotation for an element defined in the original document). This also supports third parties' ability to assert Annotations on Elements that they did not create.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#relationship","title":"Relationship","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#description-of-change_8","title":"Description of Change","text":"<p>The structure of the Relationship class has changed to have a single direction and allow more than one related SPDX Elements. Relationships are now subclasses of Element, so it inherits a number of new optional properties including names, annotations, and its own relationships.</p> <p>Relationships are no longer a property of an Element. It is now a standalone element with a \u201cfrom\u201d and \u201cto\u201d field.</p> <p>A new property \u201ccompleteness\u201d complements the use of NONE and NOASSERTION for the related SPDX elements.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#translating-from-23-to-30_8","title":"Translating from 2.3 to 3.0","text":"<p>The \u201cfrom\u201d property would be populated by the SPDX Element which has the relationship property. The \u201cto\u201d property will be the relatedSpdxElement.</p> <p>When translating the relationshipType, the \u201cfrom\u201d and \u201cto\u201d may need to be swapped - the table below will have a \u201cY\u201d in the \u201cSwap to and from?\u201d column when this is necessary.</p> <p>The completeness property would be constructed based on the following:</p> <ul> <li>\u201cto\u201d value is NONE: complete</li> <li>\u201cto\u201d value is NOASSERTION: noAssertion</li> <li>\u201cto\u201d value is an SPDX element: No value for the completeness - uses the   default</li> </ul> <p>The following table reflects the translation for relationship types from SPDX 2.3 to SPDX 3.0:</p> SPDX 2.3 Relationship Type SPDX 3.0 Relationship Type Swap to and from? LifecycleScopeType AMENDS amendedBy Y ANCESTOR_OF ancestorOf BUILD_DEPENDENCY_OF dependsOn Y build BUILD_TOOL_OF usesTool Y build CONTAINED_BY contains Y CONTAINS contains COPY_OF copiedTo Y DATA_FILE_OF hasDataFile Y DEPENDENCY_MANIFEST_OF hasDependencyManifest Y DEPENDENCY_OF dependsOn Y various lifecycle scope DEPENDS_ON dependsOn various lifecycle scope DESCENDANT_OF descendantOf DESCRIBED_BY describes Y DESCRIBES describes DEV_DEPENDENCY_OF dependsOn Y development DEV_TOOL_OF usesTool Y development DISTRIBUTION_ARTIFACT hasDistributionArtifact DOCUMENTATION_OF hasDocumentation Y DYNAMIC_LINK hasDynamicLink Y build, runtime EXAMPLE_OF hasExample Y EXPANDED_FROM_ARCHIVE expandsTo Y FILE_ADDED hasAddedFile Y FILE_DELETED hasDeletedFile Y FILE_MODIFIED modifiedBy GENERATED_FROM generates Y GENERATES generates HAS_PREREQUISITE hasPrerequisite various lifecycle scope METAFILE_OF hasMetadata Y OPTIONAL_COMPONENT_OF hasOptionalComponent Y OPTIONAL_DEPENDENCY_OF hasOptionalDependency Y various lifecycle scope OTHER other PACKAGE_OF packagedBy Y PATCH_FOR patchedBy Y PATCH_APPLIED patchedBy Y PREREQUISITE_FOR hasPrerequisite Y various lifecycle scope PROVIDED_DEPENDENCY_OF hasProvidedDependency Y various lifecycle scope REQUIREMENT_DESCRIPTION_FOR hasRequirement Y various lifecycle scope RUNTIME_DEPENDENCY_OF dependsOn Y runtime SPECIFICATION_FOR hasSpecification Y various lifecycle scope STATIC_LINK hasStaticLink various lifecycle scope TEST_CASE_OF hasTestCase Y TEST_DEPENDENCY_OF dependsOn Y test TEST_OF hasTest Y various lifecycle scope TEST_TOOL_OF usesTool Y test VARIANT_OF hasVariant Y","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_8","title":"Rationale","text":"<p>The addition of the completeness attribute is clearer than the use of NONE and NOASSERTION.</p> <p>Changing from a property to a standalone element allows for relationships to exist outside the element itself (e.g. you can now create an amended SPDX document which has a new relationship for an element defined in the original document). This enables primary Element creating parties as well as third parties to express significantly greater contextual detail among content they create as well as content created by others.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#snippet","title":"Snippet","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#description-of-change_9","title":"Description of Change","text":"<p>Byte and line range types have been changed from a StartEndPointer type to a PositiveIntegerRange. Byte range is now optional.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#translating-from-23-to-30_9","title":"Translating from 2.3 to 3.0","text":"<p>Iterate through the \u201cranges\u201d property. Any startPointer and endPointer with a property of \u201coffset\u201d would be translated to a snippetByteRange property. Any startPointer and endPointer with a property of \u201clineNumber\u201d would translate to a snippetLineRange property.</p> <p>A new Relationship would be created with the \u201cfrom\u201d pointing to the snippetFromFile and the \u201cto\u201d pointing to the Snippet. The relationshipType would be CONTAINS.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_9","title":"Rationale","text":"<p>Using the W3C Pointer standard introduced significant complexity in the SPDX 2.X specification. Although there may be some benefit in using a published standard, we have not found any instances where the W3C Pointer ontology was useful for SPDX use cases.</p> <p>Changing the snippetFromFile from a property to a relationship [to be filled in].</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#specversion","title":"SpecVersion","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#description-of-change_10","title":"Description of Change","text":"<p>The type of SpecVersion is changed from a simple string without constraints to a SemVer string which must follow the Semantic Versioning format.</p> <p>This adds a constraint where a patch version is required. Previous usage of the SpecVersiononly included the major and minor version.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#translating-from-23-to-30_10","title":"Translating from 2.3 to 3.0","text":"<p>Add a patch version of \u201c0\u201d to any previous spec version.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_10","title":"Rationale","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#the-additional-constraints-align-with-best-practices-for-versioning-strings","title":"The additional constraints align with best practices for versioning strings","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#licenselistversion","title":"LicenseListVersion","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#description-of-change_11","title":"Description of Change","text":"<p>The type of LicenseListVersion is changed from a simple string without constraints to a SemVer string which must follow the Semantic Versioning format.</p> <p>This adds a constraint where a patch version is required. Previous usage of the SPDX License List only included the major and minor version.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#translating-from-23-to-30_11","title":"Translating from 2.3 to 3.0","text":"<p>Add a patch version of \u201c0\u201d to any previous License List version.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_11","title":"Rationale","text":"<p>The additional constraints align with best practices for versioning strings.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#properties-removed","title":"Properties Removed","text":"<p>Below is a list of properties present in 2.3 and not present in 3.0. The Range / Where used is where the property was used in the SPDX 2.3 model.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#example","title":"example","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name","title":"SPDX 2.3 Model Name","text":"<p>example</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name","title":"Tag/Value Name","text":"<p>Not used</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used","title":"Range / Where Used","text":"<p>LicenseException</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_12","title":"Rationale","text":"<p>This field has not been used.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#licenseinfoinfiles","title":"LicenseInfoInFiles","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_1","title":"SPDX 2.3 Model Name","text":"<p>licenseInfoInFiles</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_1","title":"Tag/Value Name","text":"<p>LicenseInfoInFiles</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_1","title":"Range / Where Used","text":"<p>Package</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_13","title":"Rationale","text":"<p>This field is redundant with the declaredLicense property in the Files contained in the Package. It is recommended that the licenseInfoInFiles can be added as an Annotation to the Package in the format: \u201cSPDX 2.X LicenseInfoInFiles: [expression1], [expression2]\u201d where the [expressions] are the string representation of the license expressions.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#filesanalyzed","title":"FilesAnalyzed","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_2","title":"SPDX 2.3 Model Name","text":"<p>filesAnalyzed</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_2","title":"Tag/Value Name","text":"<p>FilesAnalyzed</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_2","title":"Range / Where Used","text":"<p>Package</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_14","title":"Rationale","text":"<p>Many users of the SPDX 2.X spec reported this property as very confusing.</p> <p>NOTE: There is no longer a way to specific checksums are required for files. This is being tracked in Issue #84.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#naming-differences","title":"Naming Differences","text":"<p>Below is a list of properties and classes where the name has been changed from 2.3 to 3.0. The Range / Where used is where the property was used in the SPDX 2.3 model.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#release-date","title":"Release Date","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_3","title":"SPDX 2.3 Model Name","text":"<p>releaseDate</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_3","title":"Tag/Value Name","text":"<p>ReleaseDate</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name","title":"New Name","text":"<p>releaseTime</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_3","title":"Range / Where Used","text":"<p>Package</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_15","title":"Rationale","text":"<p>Better reflects the granularity of the field.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#build-date","title":"Build Date","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_4","title":"SPDX 2.3 Model Name","text":"<p>buildDate</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_4","title":"Tag/Value Name","text":"<p>BuildDate</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_1","title":"New Name","text":"<p>buildTime</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_4","title":"Range / Where Used","text":"<p>Package</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_16","title":"Rationale","text":"<p>Better reflects the granularity of the field.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#valid-until-date","title":"Valid Until Date","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_5","title":"SPDX 2.3 Model Name","text":"<p>validUntilDate</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_5","title":"Tag/Value Name","text":"<p>ValidUntilDate</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_2","title":"New Name","text":"<p>validUntilTime</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_5","title":"Range / Where Used","text":"<p>Package</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_17","title":"Rationale","text":"<p>Better reflects the granularity of the field.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#external-document-reference_1","title":"External Document Reference","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_6","title":"SPDX 2.3 Model Name","text":"<p>externalDocumentRef</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_6","title":"Tag/Value Name","text":"<p>ExternalDocumentRef</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_3","title":"New Name","text":"<p>import</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_6","title":"Range / Where Used","text":"<p>SpdxDocument (Creation Information)</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_18","title":"Rationale","text":"<p>Feedback from SPDX 2.X usage is that externalDocumentRef is confusing due to the similar externalRef property.</p> <p>NOTE: See structural changes related to this property</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#checksum-class-data-type","title":"Checksum Class / Data Type","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_7","title":"SPDX 2.3 Model Name","text":"<p>Checksum class name and checksum property name</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_7","title":"Tag/Value Name","text":"<p>FileChecksum, PackageChecksum</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_4","title":"New Name","text":"<p>verifiedUsing property and Hash class</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_7","title":"Range / Where Used","text":"<p>Package, File</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_19","title":"Rationale","text":"<p>More general concept allowing for different verification algorithms for different scenarios.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#checksum-algorithm","title":"Checksum Algorithm","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_8","title":"SPDX 2.3 Model Name","text":"<p>checksumAlgorithm</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_8","title":"Tag/Value Name","text":"<p>N/A - parsed from a string following the Checksum: keyword.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_5","title":"New Name","text":"<p>hashAlgorithm</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_8","title":"Range / Where Used","text":"<p>Package, File</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_20","title":"Rationale","text":"<p>The term \u201chash\u201d better represents the intent of this property which is to validate the integrity of the data whereas the term \u201cchecksum\u201d is typically for the purpose of error checking.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#name","title":"Name","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_9","title":"SPDX 2.3 Model Name","text":"<p>packageName, fileName</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_9","title":"Tag/Value Name","text":"<p>PackageName, FileName</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_6","title":"New Name","text":"<p>name</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_9","title":"Range / Where Used","text":"<p>Package, File</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_21","title":"Rationale","text":"<p>In the SPDX 2.3 RDF Ontology, both spdx:fileName and spdx:packageName are sub-properties of spdx:name. The OWL has a restriction that spdx:File has exactly one spdx:fileName and spdx:Package has exactly one spdx:packageName.</p> <p>Changing these restrictions to just spdx:name would simplify the model.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#version","title":"Version","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_10","title":"SPDX 2.3 Model Name","text":"<p>versionInfo</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_10","title":"Tag/Value Name","text":"<p>PackageVersion</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_7","title":"New Name","text":"<p>packageVersion</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_10","title":"Range / Where Used","text":"<p>Package</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_22","title":"Rationale","text":"<p>This change would make the Tag/Value and RDF values consistent.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#home-page","title":"Home Page","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_11","title":"SPDX 2.3 Model Name","text":"<p>doap:homepage</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_11","title":"Tag/Value Name","text":"<p>PackageHomePage</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_8","title":"New Name","text":"<p>homePage</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_11","title":"Range / Where Used","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_23","title":"Rationale","text":"<p>Uses a consistent namespace for SPDX properties.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#annotation-comment","title":"Annotation Comment","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_12","title":"SPDX 2.3 Model Name","text":"<p>rdfs:comment</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_12","title":"Tag/Value Name","text":"<p>AnnotationComment</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_9","title":"New Name","text":"<p>statement</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_12","title":"Range / Where Used","text":"<p>Element (Package, File, Snippet)</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_24","title":"Rationale","text":"<p>The rdfs:comment property is optional and has slightly different semantics in other uses (e.g. comments on Elements). Changing the property name clearly distinguishes this usage as a mandatory property for an Annotation.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#with-exception-operator","title":"With Exception Operator","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_13","title":"SPDX 2.3 Model Name","text":"<p>WithExceptionOperator</p> <p>member property in WithExceptionOperator</p> <p>licenseException property in WithExceptionOperator</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_13","title":"Tag/Value Name","text":"<p>With (part of License Expression)</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_10","title":"New Name","text":"<p>WithAdditionOperator</p> <p>subjectLicense</p> <p>subjectAddition</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_13","title":"Range / Where Used","text":"<p>Package, File, Snippet</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_25","title":"Rationale","text":"<p>Custom Additions have been added in SPDX 3.0 which operate in a similar manner to listed License Exceptions. The new type and property names are more general to accommodate both custom additions and listed License Exceptions.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#license-exception","title":"License Exception","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_14","title":"SPDX 2.3 Model Name","text":"<p>LicenseException</p> <p>licenseExceptionId property in LicenseException</p> <p>licenseExceptionText property in LicenseException</p> <p>name property in LicenseException</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_14","title":"Tag/Value Name","text":"<p>Not used in Tag/Value</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_11","title":"New Name","text":"<p>ListedLicenseException</p> <p>additionId</p> <p>additionText</p> <p>additionName</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_14","title":"Range / Where Used","text":"<p>Package, File, Snippet</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_26","title":"Rationale","text":"<p>Custom Additions have been added in SPDX 3.0 which operate in a similar manner to listed License Exceptions. The new type and property names are more general to accommodate both custom additions and listed License Exceptions.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#extractedlicenseinfo","title":"ExtractedLicenseInfo","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_15","title":"SPDX 2.3 Model Name","text":"<p>ExtractedLicenseInfo</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_15","title":"Tag/Value Name","text":"<p>ExtractedText</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_12","title":"New Name","text":"<p>CustomLicense</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_15","title":"Range / Where Used","text":"<p>Package, File, Snippet, Document</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_27","title":"Rationale","text":"<p>The SPDX 2.X term implied that the only property was text when in fact there are several properties in common with the listed licenses. See model issue #233 for context.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#licensename","title":"licenseName","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_16","title":"SPDX 2.3 Model Name","text":"<p>licenseName</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_16","title":"Tag/Value Name","text":"<p>LicenseName</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_13","title":"New Name","text":"<p>name</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_16","title":"Range / Where Used","text":"<p>License, ListedLicense, ExtractedText</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_28","title":"Rationale","text":"<p>\u201cname\u201d is used in the Element class. Since License is a type of (subclass of) Element, it should use the same field otherwise there would be redundant fields for the same purpose.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#licensecomment","title":"LicenseComment","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_17","title":"SPDX 2.3 Model Name","text":"<p>licenseComment</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_17","title":"Tag/Value Name","text":"<p>LicenseComment</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_14","title":"New Name","text":"<p>comment</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_17","title":"Range / Where Used","text":"<p>License, ListedLicense</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_29","title":"Rationale","text":"<p>\u201ccomment\u201d is used in the Element class. Since License is a type of (subclass of) Element, it should use the same field otherwise there would be redundant fields for the same purpose.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#licenseid","title":"LicenseID","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_18","title":"SPDX 2.3 Model Name","text":"<p>licenseId</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_18","title":"Tag/Value Name","text":"<p>LicenseId</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_15","title":"New Name","text":"<p>spdxId</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_18","title":"Range / Where Used","text":"<p>License, ListedLicense</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_30","title":"Rationale","text":"<p>\u201cspdxId\u201d is used in the Element class. Since License is a type of (subclass of) Element, it should use the same field otherwise there would be redundant fields for the same purpose.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_19","title":"Range / Where Used","text":"<p>License, ListedLicense</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_31","title":"Rationale","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#primary-package-purpose","title":"Primary Package Purpose","text":"","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#spdx-23-model-name_19","title":"SPDX 2.3 Model Name","text":"<p>primaryPackagePurpose</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#tagvalue-name_19","title":"Tag/Value Name","text":"<p>PrimaryPackagePurpose</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#new-name_16","title":"New Name","text":"<p>primaryPurpose</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#range-where-used_20","title":"Range / Where Used","text":"<p>Package</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#rationale_32","title":"Rationale","text":"<p>The purpose property is now available for files and snippets in addition to Package resulting in a more general name of primaryPurpose.</p> <p>Note that additional purposes can be added using the additionalPurpose property.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0-v2.3/#serialization-formats","title":"Serialization Formats","text":"<p>SPDX 3.0 implements a JSON-LD format which has consistent class and property names with the model.</p> <p>See the SPDX 3.0 JSON Schema for the format specifics.</p> <p>The Tag/Value, YAML, RDF/XML and Spreadsheet formats are not supported.</p> <p>Additional serialization formats are being considered for the SPDX 3.1 release.</p>","tags":["v3.0","v2.3"]},{"location":"diff/v3.0.1-v3.0/","title":"Differences between V3.0.1 and V3.0","text":"<ul> <li>Fix typos</li> </ul>","tags":["v3.0.1","v3.0"]},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#compliance","title":"compliance","text":"<ul> <li>Using SPDX License List short identifiers in source files</li> <li>Using SPDX to comply with norms, standards and regulation</li> </ul>"},{"location":"tags/#license","title":"license","text":"<ul> <li>Using SPDX License List short identifiers in source files</li> </ul>"},{"location":"tags/#reference","title":"reference","text":"<ul> <li>Cross referencing</li> </ul>"},{"location":"tags/#security","title":"security","text":"<ul> <li>Including security information in a SPDX document</li> </ul>"},{"location":"tags/#v12","title":"v1.2","text":"<ul> <li>2.0 and 1.2</li> </ul>"},{"location":"tags/#v20","title":"v2.0","text":"<ul> <li>2.0 and 1.2</li> <li>2.1 and 2.0</li> </ul>"},{"location":"tags/#v21","title":"v2.1","text":"<ul> <li>2.1 and 2.0</li> <li>2.2 and 2.1</li> </ul>"},{"location":"tags/#v22","title":"v2.2","text":"<ul> <li>2.2 and 2.1</li> <li>2.2.1 and 2.2</li> </ul>"},{"location":"tags/#v221","title":"v2.2.1","text":"<ul> <li>2.2.1 and 2.2</li> <li>2.2.2 and 2.2.1</li> </ul>"},{"location":"tags/#v222","title":"v2.2.2","text":"<ul> <li>2.2.2 and 2.2.1</li> <li>2.3 and 2.2.2</li> </ul>"},{"location":"tags/#v23","title":"v2.3","text":"<ul> <li>2.3 and 2.2.2</li> <li>3.0 and 2.3</li> </ul>"},{"location":"tags/#v30","title":"v3.0","text":"<ul> <li>Cross referencing</li> <li>Getting started</li> <li>Including security information in a SPDX document</li> <li>Using SPDX to comply with norms, standards and regulation</li> <li>3.0 and 2.3</li> <li>3.0.1 and 3.0</li> </ul>"},{"location":"tags/#v301","title":"v3.0.1","text":"<ul> <li>3.0.1 and 3.0</li> </ul>"}]}